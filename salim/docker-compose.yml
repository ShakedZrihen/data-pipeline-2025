services:
  localstack:
    container_name: s3-simulator
    image: localstack/localstack:latest
    ports:
      - "4566:4566"
    environment:
      - SERVICES=s3,sqs
      - DEBUG=1
      - S3_SKIP_SIGNATURE_VALIDATION=1
    volumes:
      - "localstack-data:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./crawler/s3/init-s3.sh:/etc/localstack/init/ready.d/init-s3.sh"
    networks:
      - pipeline-network

  sqs:
    container_name: sqs-simulator
    image: localstack/localstack:latest
    ports:
      - "4567:4566"
    environment:
      - SERVICES=sqs
      - DEBUG=1
      - SQS_SKIP_SIGNATURE_VALIDATION=1
    volumes:
      - "localstack-data:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./extractor/sqs/init-sqs.sh:/etc/localstack/init/ready.d/init-sqs.sh"
    networks:
      - pipeline-network

  postgres:
    image: postgres:15
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=pricedb
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - pipeline-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  crawler:
    build:
      context: ./crawler
      dockerfile: Dockerfile
    container_name: crawler
    depends_on:
      - localstack
    environment:
      - CRAWL_INTERVAL=30
    networks:
      - pipeline-network
    restart: unless-stopped

  s3-to-sqs:
    build:
      context: ./extractor
      dockerfile: Dockerfile
    container_name: extractor
    depends_on:
      - localstack
      - sqs
    environment:
      - S3_ENDPOINT=http://localhost:4566
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
      - S3_BUCKET=providers
      - WORK_DIR=work
      - CHECK_INTERVAL=30
    networks:
      - pipeline-network
    restart: unless-stopped

  sqs-to-postgres:
    build:
      context: ./sqs_to_postgres
      dockerfile: Dockerfile
    container_name: sqs-to-postgres
    depends_on:
      - sqs
      - postgres
    environment:
      - SQS_QUEUE_NAME=test-queue
      - SQS_ENDPOINT_URL=us-east-1
      - AWS_DEFAULT_REGION=AWS_DEFAULT_REGION
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - SQS_WAIT_TIME=5
      - SQS_MAX_PER_POLL=10
      - STRICT_PRICE_ONLY=1
      - PRICE_FIRST=1
      - ENRICH_OVERWRITE=0
      - ENRICH_NORMALIZE_BRANCH=1
    networks:
      - pipeline-network
    restart: unless-stopped

volumes:
  postgres_data:
  localstack-data:

networks:
  pipeline-network:
    driver: bridge